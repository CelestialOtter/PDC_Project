/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SearchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Search");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSearchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSearchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpecificationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpecificationsSpecificationParserRuleCall_2_0 = (RuleCall)cSpecificationsAssignment_2.eContents().get(0);
		
		//Search:
		//	{Search}
		//	'Search' specifications+=Specification;
		@Override public ParserRule getRule() { return rule; }
		
		//{Search} 'Search' specifications+=Specification
		public Group getGroup() { return cGroup; }
		
		//{Search}
		public Action getSearchAction_0() { return cSearchAction_0; }
		
		//'Search'
		public Keyword getSearchKeyword_1() { return cSearchKeyword_1; }
		
		//specifications+=Specification
		public Assignment getSpecificationsAssignment_2() { return cSpecificationsAssignment_2; }
		
		//Specification
		public RuleCall getSpecificationsSpecificationParserRuleCall_2_0() { return cSpecificationsSpecificationParserRuleCall_2_0; }
	}
	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Specification");
		private final RuleCall cRestaurantParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Specification:
		//	Restaurant;
		@Override public ParserRule getRule() { return rule; }
		
		//Restaurant
		public RuleCall getRestaurantParserRuleCall() { return cRestaurantParserRuleCall; }
	}
	public class RestaurantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Restaurant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRestaurantAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRestaurantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsSTRINGTerminalRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		
		//Restaurant:
		//	{Restaurant}
		//	'restaurant' arguments=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{Restaurant} 'restaurant' arguments=STRING
		public Group getGroup() { return cGroup; }
		
		//{Restaurant}
		public Action getRestaurantAction_0() { return cRestaurantAction_0; }
		
		//'restaurant'
		public Keyword getRestaurantKeyword_1() { return cRestaurantKeyword_1; }
		
		//arguments=STRING
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }
		
		//STRING
		public RuleCall getArgumentsSTRINGTerminalRuleCall_2_0() { return cArgumentsSTRINGTerminalRuleCall_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftSpecificationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLeftSpecificationSpecificationCrossReference_1_0 = (CrossReference)cLeftSpecificationAssignment_1.eContents().get(0);
		private final RuleCall cLeftSpecificationSpecificationIDTerminalRuleCall_1_0_1 = (RuleCall)cLeftSpecificationSpecificationCrossReference_1_0.eContents().get(1);
		private final Keyword cAndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightSpecificationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRightSpecificationSpecificationCrossReference_3_0 = (CrossReference)cRightSpecificationAssignment_3.eContents().get(0);
		private final RuleCall cRightSpecificationSpecificationIDTerminalRuleCall_3_0_1 = (RuleCall)cRightSpecificationSpecificationCrossReference_3_0.eContents().get(1);
		
		//And:
		//	{And} leftSpecification=[Specification] ' And ' rightSpecification=[Specification];
		@Override public ParserRule getRule() { return rule; }
		
		//{And} leftSpecification=[Specification] ' And ' rightSpecification=[Specification]
		public Group getGroup() { return cGroup; }
		
		//{And}
		public Action getAndAction_0() { return cAndAction_0; }
		
		//leftSpecification=[Specification]
		public Assignment getLeftSpecificationAssignment_1() { return cLeftSpecificationAssignment_1; }
		
		//[Specification]
		public CrossReference getLeftSpecificationSpecificationCrossReference_1_0() { return cLeftSpecificationSpecificationCrossReference_1_0; }
		
		//ID
		public RuleCall getLeftSpecificationSpecificationIDTerminalRuleCall_1_0_1() { return cLeftSpecificationSpecificationIDTerminalRuleCall_1_0_1; }
		
		//' And '
		public Keyword getAndKeyword_2() { return cAndKeyword_2; }
		
		//rightSpecification=[Specification]
		public Assignment getRightSpecificationAssignment_3() { return cRightSpecificationAssignment_3; }
		
		//[Specification]
		public CrossReference getRightSpecificationSpecificationCrossReference_3_0() { return cRightSpecificationSpecificationCrossReference_3_0; }
		
		//ID
		public RuleCall getRightSpecificationSpecificationIDTerminalRuleCall_3_0_1() { return cRightSpecificationSpecificationIDTerminalRuleCall_3_0_1; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOrAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftSpecificationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLeftSpecificationSpecificationCrossReference_1_0 = (CrossReference)cLeftSpecificationAssignment_1.eContents().get(0);
		private final RuleCall cLeftSpecificationSpecificationIDTerminalRuleCall_1_0_1 = (RuleCall)cLeftSpecificationSpecificationCrossReference_1_0.eContents().get(1);
		private final Keyword cOrKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightSpecificationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRightSpecificationSpecificationCrossReference_3_0 = (CrossReference)cRightSpecificationAssignment_3.eContents().get(0);
		private final RuleCall cRightSpecificationSpecificationIDTerminalRuleCall_3_0_1 = (RuleCall)cRightSpecificationSpecificationCrossReference_3_0.eContents().get(1);
		
		//Or:
		//	{Or} leftSpecification=[Specification] ' Or ' rightSpecification=[Specification];
		@Override public ParserRule getRule() { return rule; }
		
		//{Or} leftSpecification=[Specification] ' Or ' rightSpecification=[Specification]
		public Group getGroup() { return cGroup; }
		
		//{Or}
		public Action getOrAction_0() { return cOrAction_0; }
		
		//leftSpecification=[Specification]
		public Assignment getLeftSpecificationAssignment_1() { return cLeftSpecificationAssignment_1; }
		
		//[Specification]
		public CrossReference getLeftSpecificationSpecificationCrossReference_1_0() { return cLeftSpecificationSpecificationCrossReference_1_0; }
		
		//ID
		public RuleCall getLeftSpecificationSpecificationIDTerminalRuleCall_1_0_1() { return cLeftSpecificationSpecificationIDTerminalRuleCall_1_0_1; }
		
		//' Or '
		public Keyword getOrKeyword_2() { return cOrKeyword_2; }
		
		//rightSpecification=[Specification]
		public Assignment getRightSpecificationAssignment_3() { return cRightSpecificationAssignment_3; }
		
		//[Specification]
		public CrossReference getRightSpecificationSpecificationCrossReference_3_0() { return cRightSpecificationSpecificationCrossReference_3_0; }
		
		//ID
		public RuleCall getRightSpecificationSpecificationIDTerminalRuleCall_3_0_1() { return cRightSpecificationSpecificationIDTerminalRuleCall_3_0_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	private final SearchElements pSearch;
	private final SpecificationElements pSpecification;
	private final RestaurantElements pRestaurant;
	private final AndElements pAnd;
	private final OrElements pOr;
	private final EStringElements pEString;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSearch = new SearchElements();
		this.pSpecification = new SpecificationElements();
		this.pRestaurant = new RestaurantElements();
		this.pAnd = new AndElements();
		this.pOr = new OrElements();
		this.pEString = new EStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Search:
	//	{Search}
	//	'Search' specifications+=Specification;
	public SearchElements getSearchAccess() {
		return pSearch;
	}
	
	public ParserRule getSearchRule() {
		return getSearchAccess().getRule();
	}
	
	//Specification:
	//	Restaurant;
	public SpecificationElements getSpecificationAccess() {
		return pSpecification;
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}
	
	//Restaurant:
	//	{Restaurant}
	//	'restaurant' arguments=STRING;
	public RestaurantElements getRestaurantAccess() {
		return pRestaurant;
	}
	
	public ParserRule getRestaurantRule() {
		return getRestaurantAccess().getRule();
	}
	
	//And:
	//	{And} leftSpecification=[Specification] ' And ' rightSpecification=[Specification];
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Or:
	//	{Or} leftSpecification=[Specification] ' Or ' rightSpecification=[Specification];
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
