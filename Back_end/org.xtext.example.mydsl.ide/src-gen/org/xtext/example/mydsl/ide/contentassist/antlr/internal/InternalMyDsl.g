/*
 * generated by Xtext 2.12.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSearch
entryRuleSearch
:
{ before(grammarAccess.getSearchRule()); }
	 ruleSearch
{ after(grammarAccess.getSearchRule()); } 
	 EOF 
;

// Rule Search
ruleSearch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSearchAccess().getGroup()); }
		(rule__Search__Group__0)
		{ after(grammarAccess.getSearchAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpecification
entryRuleSpecification
:
{ before(grammarAccess.getSpecificationRule()); }
	 ruleSpecification
{ after(grammarAccess.getSpecificationRule()); } 
	 EOF 
;

// Rule Specification
ruleSpecification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpecificationAccess().getRestaurantParserRuleCall()); }
		ruleRestaurant
		{ after(grammarAccess.getSpecificationAccess().getRestaurantParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRestaurant
entryRuleRestaurant
:
{ before(grammarAccess.getRestaurantRule()); }
	 ruleRestaurant
{ after(grammarAccess.getRestaurantRule()); } 
	 EOF 
;

// Rule Restaurant
ruleRestaurant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRestaurantAccess().getGroup()); }
		(rule__Restaurant__Group__0)
		{ after(grammarAccess.getRestaurantAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Search__Group__0__Impl
	rule__Search__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSearchAccess().getSearchAction_0()); }
	()
	{ after(grammarAccess.getSearchAccess().getSearchAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Search__Group__1__Impl
	rule__Search__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSearchAccess().getSearchKeyword_1()); }
	'Search'
	{ after(grammarAccess.getSearchAccess().getSearchKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Search__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSearchAccess().getSpecificationsAssignment_2()); }
	(rule__Search__SpecificationsAssignment_2)
	{ after(grammarAccess.getSearchAccess().getSpecificationsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Restaurant__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Restaurant__Group__0__Impl
	rule__Restaurant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Restaurant__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRestaurantAccess().getRestaurantAction_0()); }
	()
	{ after(grammarAccess.getRestaurantAccess().getRestaurantAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Restaurant__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Restaurant__Group__1__Impl
	rule__Restaurant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Restaurant__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRestaurantAccess().getRestaurantKeyword_1()); }
	'restaurant'
	{ after(grammarAccess.getRestaurantAccess().getRestaurantKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Restaurant__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Restaurant__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Restaurant__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRestaurantAccess().getArgumentsAssignment_2()); }
	(rule__Restaurant__ArgumentsAssignment_2)
	{ after(grammarAccess.getRestaurantAccess().getArgumentsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Search__SpecificationsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSearchAccess().getSpecificationsSpecificationParserRuleCall_2_0()); }
		ruleSpecification
		{ after(grammarAccess.getSearchAccess().getSpecificationsSpecificationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Restaurant__ArgumentsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRestaurantAccess().getArgumentsSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getRestaurantAccess().getArgumentsSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
